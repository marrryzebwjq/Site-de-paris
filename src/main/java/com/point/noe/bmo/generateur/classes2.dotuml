ClassDiagram [frame=true framecolor=steelblue label="Class Diagram"] {
    /* Résultats */
    abstract class AResultat
    { 
        public Gagnant : String;
        public DemandeAjoutPari1Entier(Reference1 : Integer) : bool;
        public DemandeAjoutPari2Entier(Reference1 : Integer, Reference2 : Integer) : bool;
        public DemandeAjoutPari1String(Refenrece1 : String) : bool;
    };

    class ResultatFootball
    {
        public ScoreMiTempsA1 : Integer;
        public ScoreMiTempsB1 : Integer;
        public ScoreMiTempsA2 : Integer;
        public ScoreMiTempsB2 : Integer;
    };

    ResultatFootball --> AResultat;

    class ResultatTennis
    {
        public scoreA1 : Integer; 
        public scoreB1 : Integer; 
        public scoreA2 : Integer;
        public scoreB2 : Integer; 
        public scoreA3 : Integer; 
        public scoreB3 : Integer; 
        public scoreA4 : Integer;
        public scoreB4 : Integer;
        public scoreA5 : Integer; 
        public scoreB5 : Integer;
        public joueurA : String;
        public joueurB : String;
    };

    ResultatTennis --> AResultat;

    class ResultatBaseball
    {
        public scoreA : Integer; 
        public scoreB : Integer;
    };

    ResultatBaseball --> AResultat;

    /* Pari */
    abstract class APari
    {
        MontantTotal : int;
    };

    APari -- AResultat : "< Réfère"

    class PariSimple
    {
        Gagnant : String
    };

    PariSimple --> APari;

    abstract class APariAvance
    {};

    APariAvance --> APari;

    class Pari1Entier
    {
        Reference1 : Integer;
    };

    Pari1Entier --> APariAvance;

    class Pari2Entier
    {
        Reference1 : Integer;
        Reference2 : Integer;
    };

    Pari2Entier --> APariAvance;

    class Pari1String
    {
        Reference1 : String;
    };

    Pari1String--> APariAvance;

    /* Tickets */
    abstract class ATicket
    {
        private Montant : int

        public estGagnant() : boolean
    };


    class TicketSimple
    {
        PariGagnant : String;
    };

    TicketSimple -- PariSimple : "< Pari sur";
    TicketSimple --> ATicket;

    class Ticket1String
    {
        PariString1 : String;
    };

    Ticket1String --> ATicket;
    Ticket1String -- Pari1String : "< Pari sur";
    
    class Ticket1Entier
    {
        PariEntier1 : Integer;
    };

    Ticket1Entier --> ATicket;
    Ticket1Entier -- Pari1Entier : "< Pari sur";

    class Ticket2Entier
    {
        PariEntier1 : Integer;
        PariEntier2 : Integer;
    };

    Ticket2Entier --> ATicket;
    Ticket2Entier -- Pari2Entier : "< Pari sur";

    /* Compte */
    class Compte
    {
        Capital : int;
    };

    /* Parieur */
    class Parieur
    {
        public DemandeTicketSimple(evenement : String, pari1 : String, montant : int) : bool;
        public DemandeTicket1Entier(evenement : String, pari1 : int, montant : int) : bool;
        public DemandeTicket2Entier(evenement : String, pari1 : int, pari2 : int, montant : int) : bool;
        public DemandeTicket1String(evenement : String, pari1 : String, montant : int) : bool;
        public DemandeVersement(montant : int) : bool;
    };

    Compte -a-> Parieur;
    Parieur -- APari : "< Pari sur"

    /* Bookmaker */
    class Bookmaker
    {
        public DemandeOuvertureEvenement(sport : String, evenement : String, resultat : AResultat) : bool;
        public DemandeResultat(evenement : String) : AResultat;
        public DemandeFermetureEvenement(sport : String) : bool;
    };

    /* Système */
    class Systeme
    {
        public AjouteTicket1Simple(evenement : String, pari1 : String, parieur : Parieur, montant : int) : void;
        public AjouteTicket1Entier(evenement : String, pari1 : int, parieur : Parieur, montant : int) : void;
        public AjouteTicket2Entier(evenement : String, pari1 : int, pari2 : int, parieur : Parieur, montant : int) : void;
        public AjouteTicket1String(evenement : String, pari1 : String, parieur : Parieur, montant : int) : void;
        public AjoutePari1Entier(evenement : String, pari1 : Integer) : void;
        public AjoutePari2Entier(evenement : String, pari2 : Integer, pari2 : Integer) : void;
        public AjoutePari1String(evenement : String, pari1 : String) : void;
        public Debiter(parieur : Parieur, ticket : ATicket) : void;
        public Crediter(pari : APari, ticket : ATicket)
    };

    Systeme -- Compte : "< Crédite / Débite"

    /* Evènement */
    class Evenement
    {
        private Sport : String
        private Nom : String
        private MontantMax : int;
        private MontantGain : int;
    };

    AResultat "1" -a-> "1" Evenement;
    PariSimple "1" -a-> "1" Evenement; // Un évènement contient toujours un pari simple
    APariAvance "*" -a-> "1" Evenement;
    Bookmaker -- Systeme : "Communique >";
    Parieur -- Systeme : "Communique >";
    ATicket "*" -a-> "1" Evenement;
    ATicket "*" -- "1" Parieur : "Associé à >" 
    AResultat -- Systeme : "Communique >";
}